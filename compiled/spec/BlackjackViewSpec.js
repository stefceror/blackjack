// Generated by CoffeeScript 1.7.1
(function() {
  var assert, collection, expect;

  assert = chai.assert;

  expect = chai.expect;


  /*
  describe "deck constructor", ->
  
    it "should create a card collection", ->
      assert.strictEqual collection.length, 52
   */

  collection = new Deck();

  describe("Score Handling", function() {
    return it("should give 2 scores when an ace is dealt", function() {
      var hand1;
      hand1 = new Hand([
        new Card({
          'rank': 1
        }), new Card({
          'rank': 0
        })
      ]);
      assert.strictEqual(hand1.scores()[0], 11);
      return assert.strictEqual(hand1.scores()[1], 21);
    });
  });

  describe("Basic hand rules", function() {
    return it("should be at least two", function() {
      var hand2;
      hand2 = collection.dealPlayer();
      return expect(hand2.scores()[0]).to.be.above(2);
    });
  });

  describe("Win possibilites", function() {});

  describe("No busts", function() {
    it("should evaluate player wins with no bust", function() {
      var game1;
      game1 = new Game({
        'deck': collection
      });
      game1.set('playerHand', new Hand([
        new Card({
          'rank': 8
        }), new Card({
          'rank': 0
        })
      ]));
      game1.set('dealerHand', new Hand([
        new Card({
          'rank': 7
        }), new Card({
          'rank': 0
        })
      ]));
      return assert.strictEqual(game1.endGame(), 'player');
    });
    return it("should evaluate dealer wins with no bust", function() {
      var game2;
      game2 = new Game({
        'deck': collection
      });
      game2.set('playerHand', new Hand([
        new Card({
          'rank': 7
        }), new Card({
          'rank': 0
        })
      ]));
      game2.set('dealerHand', new Hand([
        new Card({
          'rank': 8
        }), new Card({
          'rank': 0
        })
      ]));
      return assert.strictEqual(game2.endGame(), 'dealer');
    });
  });

  describe("Busts", function() {
    it("should check that player loses when over 21", function() {
      var game3;
      game3 = new Game({
        'deck': collection
      });
      game3.set('playerHand', new Hand([
        new Card({
          'rank': 10
        }), new Card({
          'rank': 10
        })
      ], collection));
      game3.get('playerHand').hit();
      game3.get('playerHand').hit();
      return assert.strictEqual(game3.endGame(), 'dealer');
    });
    return it("should check that dealer loses when over 21", function() {
      var game3;
      game3 = new Game({
        'deck': collection
      });
      game3.set('dealerHand', new Hand([
        new Card({
          'rank': 10
        }), new Card({
          'rank': 10
        })
      ], collection));
      game3.get('dealerHand').hit();
      game3.get('dealerHand').hit();
      return assert.strictEqual(game3.endGame(), 'player');
    });
  });

  describe("Tie", function() {
    return it("should declare a tie when scores are equal", function() {
      var game1;
      game1 = new Game({
        'deck': collection
      });
      game1.set('playerHand', new Hand([
        new Card({
          'rank': 8
        }), new Card({
          'rank': 0
        })
      ]));
      game1.set('dealerHand', new Hand([
        new Card({
          'rank': 8
        }), new Card({
          'rank': 0
        })
      ]));
      return assert.strictEqual(game1.endGame(), 'tie');
    });
  });

  describe("Dealer behavior", function() {
    return it("should have the dealer hit when his score is under 17", function() {
      var game1;
      game1 = new Game({
        'deck': collection
      });
      game1.set('dealerHand', new Hand([
        new Card({
          'rank': 6
        }), new Card({
          'rank': 10
        })
      ], collection));
      game1.dealerTurn();
      return expect(game1.get('dealerHand').scores()[0]).to.be.above(17);
    });
  });

  describe("Score checking with aces", function() {
    it("should return the higher of two scores if both less than 21", function() {
      var game1;
      game1 = new Game({
        'deck': collection
      });
      return assert.strictEqual(game1.handleAce([10, 20]), 20);
    });
    return it("should return the lower score if higher score is more than 21", function() {
      var game1;
      game1 = new Game({
        'deck': collection
      });
      return assert.strictEqual(game1.handleAce([12, 22]), 12);
    });
  });

}).call(this);

//# sourceMappingURL=BlackjackViewSpec.map
