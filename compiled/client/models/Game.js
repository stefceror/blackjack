// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.initialize = function(params) {
      this.set('playerHand', params.deck.dealPlayer());
      this.set('dealerHand', params.deck.dealDealer());
      return this.listenTo(this.get('playerHand'), 'stand', this.endGame);
    };

    Game.prototype.endGame = function() {
      var dealerScore, handleAce, playerScore;
      handleAce = function(score) {
        if (score.length === 2) {
          if (score[1] > 21) {
            return score[0];
          } else {
            return score[1];
          }
        } else {
          return score;
        }
      };
      playerScore = (this.get('playerHand')).scores();
      playerScore = handleAce(playerScore);
      (this.get('dealerHand')).at(0).flip();
      dealerScore = (this.get('dealerHand')).scores();
      dealerScore = handleAce(dealerScore);
      console.log(playerScore);
      console.log(dealerScore);
      return console.log(this.pickWinner(playerScore, dealerScore));
    };

    Game.prototype.pickWinner = function(playerScore, dealerScore) {
      var winner;
      return winner = (function() {
        switch (false) {
          case !(playerScore > 21 && dealerScore > 21):
            return 'loss';
          case !(playerScore > 21):
            return 'dealer';
          case !(dealerScore > 21):
            return 'player';
          case !(playerScore > dealerScore):
            return 'player';
          case !(dealerScore > playerScore):
            return 'dealer';
        }
      })();
    };

    return Game;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=Game.map
