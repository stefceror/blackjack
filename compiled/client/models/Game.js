// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.initialize = function(params) {
      this.set('playerHand', params.deck.dealPlayer());
      this.set('dealerHand', params.deck.dealDealer());
      this.listenTo(this.get('playerHand'), 'stand', this.dealerTurn);
      this.listenTo(this.get('dealerHand'), 'stand', this.endGame);
      this.listenTo(this.get('playerHand'), 'bust', this.endGame);
      return this.listenTo(this.get('dealerHand'), 'bust', this.endGame);
    };

    Game.prototype.endGame = function() {
      var dealerScore, playerScore, winner;
      playerScore = (this.get('playerHand')).scores();
      playerScore = this.handleAce(playerScore);
      dealerScore = (this.get('dealerHand')).scores();
      dealerScore = this.handleAce(dealerScore);
      winner = this.pickWinner(playerScore, dealerScore);
      return this.trigger(winner);
    };

    Game.prototype.handleAce = function(score) {
      if (score.length === 2) {
        if (score[1] > 21) {
          return score[0];
        } else {
          return score[1];
        }
      } else {
        return score;
      }
    };

    Game.prototype.pickWinner = function(playerScore, dealerScore) {
      var winner;
      return winner = (function() {
        switch (false) {
          case !(playerScore > 21 && dealerScore > 21):
            return 'loss';
          case !(playerScore > 21):
            return 'dealer';
          case !(dealerScore > 21):
            return 'player';
          case !(playerScore > dealerScore):
            return 'player';
          case !(dealerScore > playerScore):
            return 'dealer';
          default:
            return 'tie';
        }
      })();
    };

    Game.prototype.dealerTurn = function() {
      (this.get('dealerHand')).at(0).flip();
      while (!((this.handleAce((this.get('dealerHand')).scores())) >= 17)) {
        (this.get('dealerHand')).hit();
      }
      if ((this.get('dealerHand')).scores()[0] <= 21) {
        return this.endGame.apply(this);
      }
    };

    return Game;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=Game.map
